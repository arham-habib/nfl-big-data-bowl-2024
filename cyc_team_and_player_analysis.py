# -*- coding: utf-8 -*-
"""cyc_team_and_player_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iyJVZY9waHCpmVE4fmK53Gq_GO_vfF5H
"""

import pandas as pd
import numpy as np
import os
import math
import json
from matplotlib import pyplot as plt

"""# Analyzing Teams & Position Groups"""

players_df = pd.read_csv('data/players.csv')
all_tracking_dfs = []
for week in range(3, 10):
  tracking_df = pd.read_csv(f'data/tracking_week_{week}.csv')
  all_tracking_dfs.append(tracking_df)

all_tracking_df = pd.concat(all_tracking_dfs)
all_tracking_df = pd.merge(all_tracking_df, players_df[['nflId', 'position']], left_on='nflId', right_on='nflId')

defensive_positions = ['DE', 'NT', 'SS', 'FS', 'OLB', 'DT', 'CB', 'ILB', 'MLB', 'DB']
defense_all_tracking_df = all_tracking_df.loc[all_tracking_df['position'].isin(defensive_positions)]
defense_all_tracking_df = defense_all_tracking_df[['gameId', 'playId', 'nflId', 'position', 'displayName','club']].drop_duplicates()

cyc_by_play_df = pd.read_csv('data/cpr_weighted_blockers_final.csv').drop_duplicates()
defense_tracking_cyc_df = pd.merge(defense_all_tracking_df, cyc_by_play_df[['gameId', 'playId', 'nflId', 'constrictivePresenceSum']], right_on=['gameId', 'playId', 'nflId'], left_on=['gameId', 'playId', 'nflId'])
defense_tracking_cyc_df['position'] = defense_tracking_cyc_df['position'].apply(lambda x: 'ILB' if (x=='MLB') else ('DT' if (x=='NT') else ('S' if ((x == 'FS') or (x == 'SS')) else ('CB' if (x == 'DB') else x))))

cyc_by_play_df = pd.read_csv('data/cpr_weighted_blockers_final.csv').drop_duplicates()
defense_tracking_cyc_df = pd.merge(defense_all_tracking_df, cyc_by_play_df[['gameId', 'playId', 'nflId', 'constrictivePresenceSum']], right_on=['gameId', 'playId', 'nflId'], left_on=['gameId', 'playId', 'nflId'])
defense_tracking_cyc_df['position'] = defense_tracking_cyc_df['position'].apply(lambda x: 'ILB' if (x=='MLB') else ('DT' if (x=='NT') else ('S' if ((x == 'FS') or (x == 'SS')) else ('CB' if (x == 'DB') else x))))

def replacement_result(player_id):
  #Figure out details for the given player (position, club)
  player_position = defense_tracking_cyc_df.loc[defense_tracking_cyc_df['nflId'] == player_id]['position'].iloc[0]
  player_club = defense_tracking_cyc_df.loc[defense_tracking_cyc_df['nflId'] == player_id]['club'].iloc[0]

  #Limit your search to only plays that include the club of your player (these are all defensive only)
  player_team_plays = defense_tracking_cyc_df.loc[defense_tracking_cyc_df['club'] == player_club]

  #Just for tracking purposes:
  num_total_plays = player_team_plays[['gameId', 'playId']].drop_duplicates()

  #This gets you all unique game,play combos that include our player of interest
  included_plays = player_team_plays.loc[player_team_plays['nflId'] == player_id][['gameId', 'playId']].drop_duplicates()

  #This goes back into our dataframe that has constrictivePresenceSum, and selects all 11 players on the field for the 'included_plays' from above
  included_plays_data = player_team_plays.loc[(player_team_plays['gameId'].isin(included_plays['gameId'])) & (player_team_plays['playId'].isin(included_plays['playId']))]
  num_included = len(included_plays_data[['gameId', 'playId']].drop_duplicates())


  #This is the average CYC for the entire time in all 'included' plays; AKA average yardage differential
  #Calculate: Find the total CYC(yardage differential) for each play using groupby, then you take the mean to get average per play
  total_cyc_included = included_plays_data.groupby(['gameId', 'playId'])['constrictivePresenceSum'].sum().reset_index()['constrictivePresenceSum'].mean()

  #Same as above, but now you limit your search to only sum CYCs of players within the position group (includes your player of interest)
  #Once again, you get the average CYC for this position group by taking the mean after the groupby
  #To end it off, you divide by the total_cyc_included; this gives us that expression of % or 'how many hards they constraint/give up per yard
  position_cyc_included = included_plays_data.loc[included_plays_data['position'] == player_position].groupby(['gameId', 'playId'])['constrictivePresenceSum'].sum().reset_index()['constrictivePresenceSum'].mean()

  #Same as above but opposite:
  excluded_plays = player_team_plays.loc[(~player_team_plays['gameId'].isin(included_plays['gameId'])) | (~player_team_plays['playId'].isin(included_plays['playId']))]
  num_excluded = len(excluded_plays[['gameId', 'playId']].drop_duplicates())

  total_cyc_excluded = excluded_plays.groupby(['gameId', 'playId'])['constrictivePresenceSum'].sum().reset_index()['constrictivePresenceSum'].mean()
  position_cyc_excluded = excluded_plays.loc[excluded_plays['position'] == player_position].groupby(['gameId', 'playId'])['constrictivePresenceSum'].sum().reset_index()['constrictivePresenceSum'].mean()

  return total_cyc_included, total_cyc_excluded, position_cyc_included, position_cyc_excluded, num_included, num_excluded
removal_analysis_df = defense_tracking_cyc_df[['nflId', 'position', 'displayName']].drop_duplicates()
removal_analysis_df['With, Without'] = removal_analysis_df['nflId'].apply(lambda x: replacement_result(x))
removal_analysis_df['team_avg_cyc_with'] = removal_analysis_df['With, Without'].apply(lambda x: x[0])
removal_analysis_df['team_avg_cyc_without'] = removal_analysis_df['With, Without'].apply(lambda x: x[1])
removal_analysis_df['position_avg_cyc_with'] = removal_analysis_df['With, Without'].apply(lambda x: x[2])
removal_analysis_df['position_avg_cyc_without'] = removal_analysis_df['With, Without'].apply(lambda x: x[3])
removal_analysis_df['num_with'] = removal_analysis_df['With, Without'].apply(lambda x: x[4])
removal_analysis_df['num_without'] = removal_analysis_df['With, Without'].apply(lambda x: x[5])
removal_analysis_df.drop(columns=['With, Without'], axis=1, inplace=True)
removal_analysis_df['team_avg_cyc_impact'] = removal_analysis_df['team_avg_cyc_with'] - removal_analysis_df['team_avg_cyc_without']
removal_analysis_df['position_pct_of_cyc_impact'] = removal_analysis_df['position_pct_of_cyc_with'] - removal_analysis_df['position_pct_of_cyc_without']
removal_analysis_df.to_csv('data/player_removal_impact.csv')

#gameId x playId -> defTeam, defTeamDEs, defTeamLBs, ..., defTeamDEsAvgCYC, defTeamLBsAvgCYC, ..., yardsByCarrier, expectedYardsByCarrier
game_play_team_position_cyc_df = pd.DataFrame(defense_tracking_cyc_df.groupby(['gameId', 'playId', 'club', 'position'])['constrictivePresenceSum'].sum()).reset_index()

team_position_cyc = game_play_team_position_cyc_df.pivot_table(index=['gameId', 'playId', 'club'], columns=['position'], values='constrictivePresenceSum', aggfunc='sum')
team_position_cyc.reset_index(inplace=True)
team_position_cyc.fillna(0, inplace=True)
team_position_cyc.index.name = None
team_position_cyc['Total'] = 0
defensive_positions = ['DE', 'DT', 'S', 'OLB', 'ILB', 'CB']
for position in defensive_positions:
  team_position_cyc['Total'] = team_position_cyc['Total'] + team_position_cyc[position]

team_position_avg_cyc = (team_position_cyc.groupby('club')[defensive_positions + ['Total']].mean()).reset_index()
team_position_avg_cyc['Total Sum'] = team_position_cyc.groupby('club')['Total'].sum().reset_index()['Total']
team_position_avg_cyc.sort_values('Total', ascending=False).reset_index().to_csv('/content/drive/MyDrive/NFL Big Data Bowl 2024/position_analysis_results/team_positions_and_totals.csv')